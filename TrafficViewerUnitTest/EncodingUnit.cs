using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrafficViewerSDK;
using System.IO;
using TrafficViewerUnitTest.Properties;
using System.Net;
using ManualExplorerUnitTest;
using Testing;
using TrafficViewerSDK.Http;
using System.Threading;

namespace TrafficViewerUnitTest
{


    [TestClass]
    public class EncodingUnit
    {

        [TestMethod]
        public void Encoding_SimpleControl()
        {
            string controlText = "The quick brown hair \r\n\0 jumps over the lazy fox";
            TrafficViewerEncoding testEncoding = new TrafficViewerEncoding();
            Encoding controlEncoding = Encoding.UTF8;

            byte[] testBytes = testEncoding.GetBytes(controlText);
            byte[] controlBytes = controlEncoding.GetBytes(controlText);

            //compare the generated bytes
            Assert.AreEqual(controlBytes.Length, testBytes.Length, "Incorrect byte lenghts");

            int len = testBytes.Length;

            for (int idx = 0; idx < len; idx++)
            {
                Assert.AreEqual(controlBytes[idx], testBytes[idx],"Incorrect bytes at position {0}", idx);
            }

        }


        [TestMethod]
        public void Encoding_NonPrintableChars()
        {

            Encoding testEncoding = new ModifiedExtendedASCIIEncoding();
            
            int len = 1;
            for (int i = 0; i < 1000; i++)
            {
                
                Random rand = new Random();
                len = rand.Next(100, 1000);
                byte[] testBytes = new byte[len];
               
                rand.NextBytes(testBytes);
                
                string testString = testEncoding.GetString(testBytes);
              

                byte [] resultingTestBytes = testEncoding.GetBytes(testString);
               

                Assert.AreEqual(testBytes.Length, resultingTestBytes.Length, "Incorrect byte lenghts after conversion from string");

                
                string failures = String.Empty;
                for (int idx = 0; idx < len; idx++)
                {
                    if (resultingTestBytes[idx] != testBytes[idx])
                        failures += String.Format("{0},", idx);
                }

                Assert.IsTrue(failures.Equals(String.Empty), "Failures after conversion at positions: {0}", failures);
            }
            
        }

    }
}
