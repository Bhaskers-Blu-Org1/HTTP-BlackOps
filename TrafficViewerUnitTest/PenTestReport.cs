using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrafficViewerSDK;
using System.IO;
using TrafficViewerUnitTest.Properties;
using System.Web.Script.Serialization;
using ASMRest;

namespace TrafficViewerUnitTest
{
	//[TestClass]
	public class PenTestReport
	{
		private static void InitSettings()
		{
			ASMRestSettingsInstance.Instance.HostAndPort = "";
            ASMRestSettingsInstance.Instance.UserName = null;
            ASMRestSettingsInstance.Instance.Password = null;
            Assert.IsNotNull(ASMRestSettingsInstance.Instance.UserName, "Need to specify a user name and password for the unit test");
            
		}


        [TestMethod]
        public void CheckSeverityCounts()
        {



        }


       
		[TestMethod]
		public void TestLogin()
		{
			InitSettings();

            BaseRestHttpClient loginManager = new BaseRestHttpClient(ASMRestSettingsInstance.Instance);
			
			Assert.IsTrue(loginManager.Login());
		}

		

		[TestMethod]
		public void GetApplications()
		{
			InitSettings();
            ApplicationListCall call = new ApplicationListCall(ASMRestSettingsInstance.Instance);
			Dictionary<string,string>[] apps = call.Fetch();

			Assert.IsNotNull(apps);
			Assert.IsTrue(apps.Length > 0);
		}


		[TestMethod]
		public void GetIssueAttributeDefinitions()
		{
			InitSettings();
            IssueAttributeDefinitionListCall call = new IssueAttributeDefinitionListCall(ASMRestSettingsInstance.Instance);
			IssueAttributeDefinitionCollection defs = call.Get();

			Assert.IsNotNull(defs);
			
		}


		[TestMethod]
		public void GetIssueTypes()
		{
			InitSettings();
			ApplicationWithAttributes app = MakeApp();
            OpenIssueTypeListCall call = new OpenIssueTypeListCall(app.name, ASMRestSettingsInstance.Instance, Severity.All, GroupType.IssueType, IssueItemType.All);
			Dictionary<string, string>[] issueTypes = call.Fetch();

			Assert.IsNotNull(issueTypes);
			Assert.IsTrue(issueTypes.Length > 0);
		}


		[TestMethod]
		public void GetIssues()
		{
			InitSettings();
			ApplicationWithAttributes app = MakeApp();
			IssueListCall call = new IssueListCall(app, ASMRestSettingsInstance.Instance, IssueFilterType.Type, "Cross-Site Scripting");
			Dictionary<string, string>[] issues = call.Fetch();

			Assert.IsNotNull(issues);
			Assert.IsTrue(issues.Length > 0);

			
		}

		[TestMethod]
		public void GetIssue()
		{
			InitSettings();
			ApplicationWithAttributes app = MakeApp();
            IssueCall call = new IssueCall(app, ASMRestSettingsInstance.Instance);
			IssueWithAttributes issue = call.Get(436774);

			Assert.IsNotNull(issue);

			Assert.AreEqual("Highest Threat",issue.GetAttrVal("Item Type"));

		}

		[TestMethod]
		public void GetApp()
		{
			InitSettings();

            AppCall call = new AppCall(ASMRestSettingsInstance.Instance);
			ApplicationWithAttributes app = call.Get(79);

			Assert.IsNotNull(app);
			
			Assert.AreEqual("Altoro Mutual", Utils.HtmlDecode(app.name));
			Assert.AreEqual("Yes", app.GetAttrVal("Web Based"));

		}

		private static ApplicationWithAttributes MakeApp()
		{

            AppCall call = new AppCall(ASMRestSettingsInstance.Instance);
            call.SkipHtmlEncoding = true;
            ApplicationWithAttributes app = call.Get(79);
			return app;
		}


		[TestMethod]
		public void GetTranslatedIssues()
		{
			InitSettings();

            IssueAttributeDefinitionListCall defsCall = new IssueAttributeDefinitionListCall(ASMRestSettingsInstance.Instance);
			IssueAttributeDefinitionCollection defs = defsCall.Get();

			//construct the mapping table
			Dictionary<string, string> map = new Dictionary<string, string>();

			foreach (IssueAttributeDefinitionEx def in defs.attributeDefColl)
			{
				map.Add(def.id.ToString(), def.name);
			}

			ApplicationWithAttributes app = MakeApp();

			IssueListCall call = new IssueListCall(app, ASMRestSettingsInstance.Instance, IssueFilterType.Type, "Cross-Site Scripting");
			Dictionary<string, string>[] issues = call.Fetch();

			Assert.IsNotNull(issues);
			Assert.IsTrue(issues.Length > 0);


		}

	

	}
}
