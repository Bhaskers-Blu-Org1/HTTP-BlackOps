using CommonControls;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Security;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using TrafficServer;
using TrafficViewerControls.Browsing;
using TrafficViewerInstance;
using TrafficViewerSDK;
using TrafficViewerSDK.Http;

namespace TrafficViewerControls.DefaultExploiters
{
	public partial class ManInTheMiddleForm : Form
	{
		BaseProxy _proxy;
		
		public ManInTheMiddleForm()
		{
			InitializeComponent();
		}

		private void ManInTheMiddleForm_Load(object sender, EventArgs e)
		{
			
			string domainName = IPGlobalProperties.GetIPGlobalProperties().DomainName;
			string strHostName = Dns.GetHostName();

			if (!strHostName.EndsWith(domainName))
			{
				strHostName += "." + domainName;  
			}

			_textAttackHost.Text = strHostName;
			
			// Then using host name, get the IP address list..
			IPHostEntry ipEntry = Dns.GetHostEntry(strHostName); 
			IPAddress[] addr = ipEntry.AddressList;
			
			if (addr != null && addr.Length > 0)
			{
				foreach (IPAddress ip in addr)
				{
					string ipString = ip.ToString();
					
					if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
					{
						_textAttackHost.Text = ipString;
						break;
					}
				}
			}
		}

		private void UseCurrentTrafficClick(object sender, EventArgs e)
		{
			_textTargetHost.Enabled = !_checkUserTrafficFromCurrentFile.Checked;
			
		}

		private void StartClick(object sender, EventArgs e)
		{
			StartServer(null,null);
		}

	
		private void StartServer(object sender, EventArgs e)
		{

			try
			{
				
				if (_checkUserTrafficFromCurrentFile.Checked)
				{
					_proxy = new TrafficStoreProxy(TrafficViewer.Instance.TrafficViewerFile,
						TrafficViewer.Instance.TrafficViewerFile,
						_textAttackHost.Text,
						80,
						int.Parse(_textAttackPort.Text));


				}
				else
				{
					_proxy = new ReverseProxy(
							_textAttackHost.Text,
							80,
                            int.Parse(_textAttackPort.Text),
							TrafficViewer.Instance.TrafficViewerFile);
                    _proxy.ExtraOptions[ReverseProxy.FORWARDING_HOST_OPT] = _textTargetHost.Text;
                    _proxy.ExtraOptions["ForwardingPort"] = _textHostPort.Text;
                      
					_proxy.NetworkSettings.CertificateValidationCallback = new RemoteCertificateValidationCallback(SSLValidationCallback.ValidateRemoteCertificate);
				}

				_proxy.Start();
			}
			catch (Exception ex)
			{
				ErrorBox.ShowDialog(ex.ToString());
			}

		}

        private void StopClick(object sender, EventArgs e)
        {
            if (_proxy != null && _proxy.IsListening)
            {
                _proxy.Stop();

            }
        }

        private void ManInTheMiddleForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            StopClick(sender, e);
        }

	

		
	}
}
