using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using TrafficViewerControls.Properties;
using TrafficViewerSDK;
using TrafficViewerSDK.Http;

namespace TrafficViewerControls.DefaultExploiters
{
    public class FormHelper
    {

        private string _attackPage = "Attack Page";
        /// <summary>
        /// Gets/sets the string for the attack page
        /// </summary>
        public string AttackPage
        {
            get { return _attackPage; }
            set { _attackPage = value; }
        }

        private string _url = String.Empty;
        /// <summary>
        /// Gets/sets the url for the attack page
        /// </summary>
        public string Url
        {
            get { return _url; }
            set { _url = value; }
        }

        private string _additionalMarkup = "";
        /// <summary>
        /// gets/sets additional markup
        /// </summary>
        public string AdditionalMarkup
        {
            get { return _additionalMarkup; }
            set { _additionalMarkup = value; }
        }

        private bool _isConfigurable = false;
        /// <summary>
        /// Gets/sets if is configurable
        /// </summary>
        public bool IsConfigurable
        {
            get { return _isConfigurable; }
            set { _isConfigurable = value; }
        }

        public void ConvertRequestToForm(HttpRequestInfo reqInfo, out byte[] modifiedReq, out byte[] modifiedResp)
        {
            

            string reqPath = String.Format("/form={0}", reqInfo.Path);
            string reqHost = "127.0.0.1";
            string reqPort = "9999";

            if (!String.IsNullOrWhiteSpace(_url))
            {
                Uri uri = new Uri(_url);
                reqHost = uri.Host;
                reqPort = uri.Port.ToString();

            }

            string requestString = String.Format(Resources.FormRequestString, reqPath, reqHost, reqPort);
            modifiedReq = Constants.DefaultEncoding.GetBytes(requestString);

           

            string contentType = reqInfo.Headers["Content-Type"];
           

            string configDisplay = _isConfigurable ? "" : "none";
            string postData = reqInfo.ContentData == null ? "null": String.Format("'{0}'", reqInfo.ContentDataString.Replace("'","\\'").Replace("\r","\\r").Replace("\n","\\n"));
            string responseString = String.Format(Resources.FormResponse, 
                configDisplay, 
                reqInfo.FullUrl, 
                reqInfo.Method, 
                contentType, 
                _attackPage, 
                _additionalMarkup,
                postData);
            
                       

            modifiedResp = Constants.DefaultEncoding.GetBytes(responseString);
        }

    }
}
