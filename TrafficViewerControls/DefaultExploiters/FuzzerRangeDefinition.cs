using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TrafficViewerControls.DefaultExploiters
{

    /// <summary>
    /// Defines the type of fuzzer range
    /// </summary>
    public enum FuzzerRangeType
    { 
        CharRange,
        Dictionary
    }

    /// <summary>
    /// Defines status for a fuzzer range
    /// </summary>
    public enum FuzzerRangeStatus
    { 
        Enabled,
        Disabled
    }


    /// <summary>
    /// Encapsulates a fuzzer range definition
    /// </summary>
    public class FuzzerRangeDefinition
    {
        private FuzzerRangeType _type = FuzzerRangeType.CharRange;
        /// <summary>
        /// The type of range
        /// </summary>
        public FuzzerRangeType Type
        {
            get { return _type; }
            set { _type = value; }
        }

        private string _value = String.Empty;
        /// <summary>
        /// The value of the range definition. In the case of dictionary is the 
        /// </summary>
        public string Value
        {
            get { return _value; }
            set { _value = value; }
        }

        private FuzzerRangeStatus _status = FuzzerRangeStatus.Enabled;
        /// <summary>
        /// Returns the status of the range
        /// </summary>
        public FuzzerRangeStatus Status
        {
            get { return _status; }
            set { _status = value; }
        }


        private int _startLen = 1;
        /// <summary>
        /// The smallest length of string to start
        /// </summary>
        public int StartLen
        {
            get { return _startLen; }
            set { _startLen = value; }
        }


        private int _maxLen = 6;
        /// <summary>
        /// The smallest length of string to start
        /// </summary>
        public int MaxLen
        {
            get { return _maxLen; }
            set { _maxLen = value; }
        }

        /// <summary>
        /// Ctor
        /// </summary>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="value"></param>
        public FuzzerRangeDefinition(FuzzerRangeType type,FuzzerRangeStatus status,string value, int startLen, int maxLen)
        {
            _type = type;
            _status = status;
            _value = value;
            if (_type == FuzzerRangeType.Dictionary && !File.Exists(_value))
            {
                _status = FuzzerRangeStatus.Disabled;
                _value = "!"+_value;
            }
            _startLen = startLen;
            _maxLen = maxLen;
        }

        /// <summary>
        /// Ctor
        /// </summary>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="value"></param>
        public FuzzerRangeDefinition(string type, string status, string value, string startLen, string maxLen)
        {
            _type = type.Equals("CharRange",StringComparison.OrdinalIgnoreCase)?FuzzerRangeType.CharRange:FuzzerRangeType.Dictionary;
            _status = status.Equals("true",StringComparison.OrdinalIgnoreCase)?FuzzerRangeStatus.Enabled:FuzzerRangeStatus.Disabled;
                     
            _value = value;

            /*
            if(_type == FuzzerRangeType.Dictionary && !File.Exists(_value))
            {
                _status = FuzzerRangeStatus.Disabled;
                _value = "!"+_value;
            }*/
            int startLenVal = 0;
            int maxLenVal = 0;
            int.TryParse(startLen,out startLenVal);
            int.TryParse(maxLen, out maxLenVal);
            _startLen = startLenVal;
            _maxLen = maxLenVal;
        }

        /// <summary>
        /// Converts this object to string
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return String.Format("{0}\t{1}\t{2}\t{3}\t{4}",_type,(_status == FuzzerRangeStatus.Enabled)?"true":"false",_value,_startLen,_maxLen);
        }
    }
}
