using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TrafficViewerSDK.Options;

namespace TrafficViewerControls.DefaultExploiters
{

    public class FuzzerOptions : OptionsManager
    {

        /// <summary>
        /// Number of threads to execute tests with
        /// </summary>
        public int NumberOfThreads
        {
            get
            {
                object value = GetOption("NumberOfThreads");
                if (value == null) return 10;
                return Convert.ToInt32(value);
            }
            set
            {
                SetSingleValueOption("NumberOfThreads", value);
            }
        }

        /// <summary>
        /// The pattern to match on the request
        /// </summary>
        public string MatchPattern
        {
            get
            {
                object value = GetOption("MatchPattern");
                if (value == null) return ".";
                return Convert.ToString(value);
            }
            set
            {
                SetSingleValueOption("MatchPattern", value);
            }
        }


        /// <summary>
        /// Whether to reverse the match pattern
        /// </summary>
        public bool ReversePattern
        {
            get
            {
                object value = GetOption("ReversePattern");
                if (value == null) return false;
                return Convert.ToBoolean(value);
            }
            set
            {
                SetSingleValueOption("ReversePattern", value);
            }
        }

        /// <summary>
        /// The file where to output the responses for optimization purposes
        /// </summary>
        public string OutputFile
        {
            get
            {
                object value = GetOption("OutputFile");
                if (value == null) return String.Empty;
                return Convert.ToString(value);
            }
            set
            {
                SetSingleValueOption("OutputFile", value);
            }
        }

        /// <summary>
        /// Gets a list of range definitions
        /// </summary>
        public List<string> GetRangeDefinitionListRaw()
        {
            object value = GetOption("RangeDefinitionList");
            var list = value as List<string>;
            if (list == null)
            {
                list = new List<string>();
                FuzzerRangeDefinition defaultDef = new FuzzerRangeDefinition(FuzzerRangeType.CharRange,
                    FuzzerRangeStatus.Enabled, "0-9,a-z",1,6);
                list.Add(defaultDef.ToString());
            }

            return list;
        }

        /// <summary>
        /// Sets a list of range definitions
        /// </summary>
        public void SetRangeDefinitionListRaw(IEnumerable<string> list)
        {
            SetMultiValueOption("RangeDefinitionList", list);
        }

        /// <summary>
        /// Gets a list of range definitions
        /// </summary>
        public List<FuzzerRangeDefinition> GetRangeDefinitionList()
        {
            List<FuzzerRangeDefinition> defs = new List<FuzzerRangeDefinition>();
            var list = GetRangeDefinitionListRaw();
            foreach (string line in list)
            {
                string[] vals = line.Split('\t');
                if (vals.Length == 5)
                {
                    var def = new FuzzerRangeDefinition(vals[0], vals[1], vals[2], vals[3], vals[4]);
                    defs.Add(def);
                }
            }
            return defs;
        }


        /// <summary>
        /// Sets a list of range definitions
        /// </summary>
        public void GetRangeDefinitionList(List<FuzzerRangeDefinition> defs)
        {
            List<string> rawList = new List<string>();
            foreach (FuzzerRangeDefinition def in defs)
            {
                rawList.Add(def.ToString());
            }
            SetRangeDefinitionListRaw(rawList);
        }
    }
}
